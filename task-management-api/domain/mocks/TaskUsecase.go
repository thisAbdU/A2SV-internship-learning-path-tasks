// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entities "task-management-api/domain/entities"

	mock "github.com/stretchr/testify/mock"

	model "task-management-api/domain/model"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: newTask
func (_m *TaskUsecase) CreateTask(newTask entities.Task) error {
	ret := _m.Called(newTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Task) error); ok {
		r0 = rf(newTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id, userID
func (_m *TaskUsecase) DeleteTask(id string, userID string) error {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskByID provides a mock function with given fields: id, userID
func (_m *TaskUsecase) GetTaskByID(id string, userID string) (*model.TaskInfo, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *model.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.TaskInfo, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.TaskInfo); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: userID
func (_m *TaskUsecase) GetTasks(userID string) ([]*model.TaskInfo, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []*model.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.TaskInfo, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.TaskInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: id, updatedTask, userID
func (_m *TaskUsecase) UpdateTask(id string, updatedTask entities.Task, userID string) error {
	ret := _m.Called(id, updatedTask, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.Task, string) error); ok {
		r0 = rf(id, updatedTask, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
