// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entities "task-management-api/domain/entities"

	mock "github.com/stretchr/testify/mock"

	model "task-management-api/domain/model"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// AdminRegister provides a mock function with given fields: currUser, userCreate, param
func (_m *AuthUseCase) AdminRegister(currUser entities.AuthenticatedUser, userCreate *model.UserCreate, param interface{}) (*model.UserInfo, error) {
	ret := _m.Called(currUser, userCreate, param)

	if len(ret) == 0 {
		panic("no return value specified for AdminRegister")
	}

	var r0 *model.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.AuthenticatedUser, *model.UserCreate, interface{}) (*model.UserInfo, error)); ok {
		return rf(currUser, userCreate, param)
	}
	if rf, ok := ret.Get(0).(func(entities.AuthenticatedUser, *model.UserCreate, interface{}) *model.UserInfo); ok {
		r0 = rf(currUser, userCreate, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.AuthenticatedUser, *model.UserCreate, interface{}) error); ok {
		r1 = rf(currUser, userCreate, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: userLogin
func (_m *AuthUseCase) Login(userLogin *model.UserLogin) (string, error) {
	ret := _m.Called(userLogin)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.UserLogin) (string, error)); ok {
		return rf(userLogin)
	}
	if rf, ok := ret.Get(0).(func(*model.UserLogin) string); ok {
		r0 = rf(userLogin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.UserLogin) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: userCreate
func (_m *AuthUseCase) Register(userCreate *model.UserCreate) (*model.UserInfo, error) {
	ret := _m.Called(userCreate)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.UserCreate) (*model.UserInfo, error)); ok {
		return rf(userCreate)
	}
	if rf, ok := ret.Get(0).(func(*model.UserCreate) *model.UserInfo); ok {
		r0 = rf(userCreate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.UserCreate) error); ok {
		r1 = rf(userCreate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
